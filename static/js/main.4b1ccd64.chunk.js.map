{"version":3,"sources":["Components/BarChart.js","Components/LineChart.js","Components/Card.js","Components/Body.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["BarChart","props","data","infected","recovered","deaths","labels","datasets","label","backgroundColor","options","responsive","LineChart","dailyData","map","reportDate","totalConfirmed","borderColor","fill","total","Card","className","start","end","duration","separator","Date","date","toDateString","description","Body","state","location","allCountries","handleChange","bind","getData","this","fetch","then","response","json","countries","setState","event","value","target","url","infectedData","confirmed","recoveredData","deathsData","todaysDate","lastUpdate","onChange","country","i","key","name","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4b1ccd64.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Bar} from 'react-chartjs-2'\r\n\r\nfunction BarChart(props) {\r\n\tconst data = {\r\n\t\tinfected: props.infected,\r\n\t\trecovered: props.recovered,\r\n\t\tdeaths: props.deaths\r\n\t}\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<Bar\r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n\t\t\t\t\tdatasets:[{\r\n\t\t\t\t\t\tlabel: \"People\",\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t\"rgba(0, 0, 255, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(0, 255, 0, 0.5)\",\r\n\t\t\t\t\t\t\t\"rgba(255, 0, 0, 0.5)\"\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tdata:[data.infected, data.recovered, data.deaths]\r\n\t\t\t\t\t}]\r\n\t\t\t\t}}\r\n\t\t\t\toptions={{responsive: true}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default BarChart","import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nfunction LineChart(props){\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<Line \r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: props.dailyData.map(({reportDate}) => reportDate),\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tdata: props.dailyData.map(({totalConfirmed}) => totalConfirmed),\r\n\t\t\t\t\t\tlabel: \"Infected\",\r\n\t\t\t\t\t\tborderColor: \"blue\",\r\n\t\t\t\t\t\tfill: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata: props.dailyData.map(({deaths}) => deaths.total),\r\n\t\t\t\t\t\tlabel: \"Deaths\",\r\n\t\t\t\t\t\tborderColor: \"red\",\r\n\t\t\t\t\t\tfill: true,\r\n\t\t\t\t\t}]\r\n\r\n\t\t\t\t}}\r\n\t\t\t\toptions={{responsive: true}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LineChart","import React from 'react'\r\nimport CountUp from 'react-countup'\r\n\r\nfunction Card(props) {\r\n\treturn(\r\n\t\t<div className=\"cardContainer\">\r\n\t\t\t<h3>{props.label}</h3>\r\n\t\t\t<CountUp start={0} end={props.data} duration={1.5} separator=\",\"/>\r\n\t\t\t<h3>{new Date(props.date).toDateString()}</h3>\r\n\t\t\t<h2>{props.description}</h2>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card","import React, {Component} from 'react'\r\nimport BarChart from \"../Components/BarChart.js\"\r\nimport LineChart from \"../Components/LineChart.js\"\r\nimport Card from \"../Components/Card.js\"\r\n\r\nclass Body extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tinfected: 0,\r\n\t\t\trecovered: 0,\r\n\t\t\tdeaths: 0,\r\n\t\t\tlocation: \"Global\",\r\n\t\t\tallCountries: [],\r\n\t\t\tdailyData: [],\r\n\t\t\tdate: \"\"\r\n\t\t}\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.getData = this.getData.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getData(\"https://covid19.mathdro.id/api\");\r\n\r\n\t\tfetch(\"https://covid19.mathdro.id/api/countries\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst {countries} = response;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tallCountries: countries\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\tfetch(\"https://covid19.mathdro.id/api/daily\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tdailyData: response\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tconst {value} = event.target;\r\n\t\tthis.setState({location: value});\r\n\t\tif(value == \"Global\") {\r\n\t\t\tthis.getData(\"https://covid19.mathdro.id/api\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.getData(\"https://covid19.mathdro.id/api/countries/\"+value);\r\n\t\t}\r\n\t}\r\n\r\n\tgetData(url){\r\n\t\tfetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst infectedData = response.confirmed.value;\r\n\t\t\t\tconst recoveredData = response.recovered.value;\r\n\t\t\t\tconst deathsData = response.deaths.value;\r\n\t\t\t\tconst todaysDate = response.lastUpdate;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tinfected: infectedData,\r\n\t\t\t\t\trecovered: recoveredData,\r\n\t\t\t\t\tdeaths: deathsData,\r\n\t\t\t\t\tdate: todaysDate\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<section className=\"dataCollection\">\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tdata={this.state.infected} \r\n\t\t\t\t\t\tlabel=\"Infected\" \r\n\t\t\t\t\t\tdate={this.state.date}\r\n\t\t\t\t\t\tdescription=\"People infected with COVID-19\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tdata={this.state.recovered} \r\n\t\t\t\t\t\tlabel=\"Recovered\" \r\n\t\t\t\t\t\tdate={this.state.date}\r\n\t\t\t\t\t\tdescription=\"Recovered cases of COVID-19\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tdata={this.state.deaths} \r\n\t\t\t\t\t\tlabel=\"Deaths\" \r\n\t\t\t\t\t\tdate={this.state.date} \r\n\t\t\t\t\t\tdescription=\"Deaths caused by COVID-19\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</section>\r\n\t\t\t\t<select onChange={this.handleChange}>\r\n\t\t\t\t\t<option value=\"Global\">Global</option>\r\n\t\t\t\t\t{this.state.allCountries.map((country, i) => <option key={i} value={country.name}>{country.name}</option>)}\r\n\t\t\t\t</select>\r\n\t\t\t\t<section className=\"graphs\">\r\n\t\t\t\t\t{this.state.location==\"Global\" ? \r\n\t\t\t\t\t<LineChart dailyData={this.state.dailyData}/> :\r\n\t\t\t\t\t<BarChart \r\n\t\t\t\t\t\tinfected={this.state.infected}\r\n\t\t\t\t\t\trecovered={this.state.recovered}\r\n\t\t\t\t\t\tdeaths={this.state.deaths} \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Body from './Components/Body.js';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>COVID-19 TRACKER</h1>\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}